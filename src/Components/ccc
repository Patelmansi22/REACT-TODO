import React, { useState } from 'react'

const PasswordValidation = () => {
  const [pwd, setPwd] = useState('');
  const [cPwd, setCPwd] = useState('');
  const [email, setEmail] = useState('');
  const [number, setNumber] = useState('');
  const [url, setUrl] = useState('');
  const [errors, setErrors] = useState({
    errorPwd: '',
    errorCPwd: '',
    errorEmail: '',
    errorNumber: '',
    errorUrl: ''
  });

  const submitHandler = (e) => {
    e.preventDefault();

    const validNumber = /^\d{10}$/;
    const strongRegExp = /[a-z](?=.*?[0-9])(?=.*?[#?!@$%^&*-])/;
    const validEmail = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
    const validURL = /((https?):\/\/)?(https://www.)?[a-z0-9]+(\.[a-z]{2,}){1,3}(#?\/?[a-zA-Z0-9#]+)*\/?(\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/;

    const strongPassword = strongRegExp.test(pwd);
    const strongEmail = email.match(validEmail);
    const strongURL = validURL.test(url);
    const strongNumber = validNumber.test(number);

    if (pwd.trim().length === 0) {
      errors.errorPwd = 'Required'
    } else if (pwd.length >= 8 && strongPassword) {
      delete errors.errorPwd
    } else {
      errors.errorPwd = 'Need Strong Password'
    }

    if (cPwd.trim().length === 0) {
      errors.errorCPwd = 'Required'
    } else if (pwd === cPwd) {
      delete errors.errorCPwd
    } else {
      errors.errorCPwd = 'Invalid Password'
    }

    if (email.trim().length === 0) {
      errors.errorEmail = 'Required'
    } else if (strongEmail) {
      delete errors.errorEmail
    } else {
      errors.errorEmail = 'Please include @ and . for valid email-id'
    }

    if (number.trim().length === 0) {
      errors.errorNumber = 'Required'
    } else if (number.trim() && strongNumber) {
      delete errors.errorNumber
    } else {
      errors.errorNumber = 'Must contain 10 numbers'
    }

    if (url.trim().length === 0) {
      errors.errorUrl = 'Required'
    } else if (strongURL) {
      delete errors.errorUrl
    } else {
      errors.errorUrl = 'Invalid URL'
    }


    setErrors({ ...errors })
    // console.log("is error", errors)
    if (Object.keys(errors).length > 0) return

    setPwd('');
    setCPwd('')
    setEmail('');
    setNumber('');
    setUrl('');
    console.log("api call")
  }


  return (
    <div>
      <form className='d-flex row my-5 mx-5' style={{ width: '60%' }} onSubmit={submitHandler}>
        <div className="mb-3">
          <label htmlFor="email" className="form-label">Email address</label>
          <input type="text" className="form-control" id="email" aria-describedby="emailHelp" value={email} onChange={(e) => setEmail(e.target.value)} title='Please include @ and . in email-id' />
          {errors.errorEmail && <span style={{ color: 'red' }}>{errors.errorEmail}</span>}
        </div>

        <div className="mb-3">
          <label htmlFor="password" className="form-label">Password</label>
          <input type="text" className="form-control" id="password" value={pwd} onChange={(e) => setPwd(e.target.value)} title='Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters' />
          {errors.errorPwd && <span style={{ color: 'red' }}>{errors.errorPwd}</span>}
        </div>

      <div className="mb-3">
          <label htmlFor="password" className="form-label">Confirm Password</label>
          <input type="text" className="form-control" id="password" value={cPwd} onChange={(e) => setCPwd(e.target.value)}/>
          {errors.errorCPwd && <span style={{ color: 'red' }}>{errors.errorCPwd}</span>}
        </div>

        <div className="mb-3">
          <label htmlFor="mobile" className="form-label">Mobile-number</label>
          <input type="text" className="form-control" id="mobile" maxLength='10' value={number} onChange={(e) => setNumber(e.target.value)} title='Must contain 10 numbers' />
          {errors.errorNumber && <span style={{ color: 'red' }}>{errors.errorNumber}</span>}
        </div>


        <div className="mb-3">
          <label htmlFor="url" className="form-label">Enter URL</label>
          <input type="text" className="form-control" id="url" value={url} onChange={(e) => setUrl(e.target.value)}/>
          {errors.errorUrl && <span style={{ color: 'red' }}>{errors.errorUrl}</span>}
        </div>



        <div>
          <button type="submit" className="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  )
}

export default PasswordValidation